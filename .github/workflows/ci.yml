name: 🚀 CI Pipeline

on:
  push:
    branches: [main, develop, 'feature/*', 'hotfix/*']
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ═══════════════════════════════════════════════════════════════════════════
  # 📋 DETECT CHANGES
  # ═══════════════════════════════════════════════════════════════════════════
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      api-changed: ${{ steps.changes.outputs.api }}
      worker-changed: ${{ steps.changes.outputs.worker }}
      docker-changed: ${{ steps.changes.outputs.docker }}
      helm-changed: ${{ steps.changes.outputs.helm }}
      database-changed: ${{ steps.changes.outputs.database }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'apps/web/**'
              - 'packages/**'
              - 'package.json'
              - 'pnpm-workspace.yaml'
            api:
              - 'apps/api/**'
              - 'requirements.txt'
            worker:
              - 'apps/worker/**'
            docker:
              - 'Dockerfile*'
              - 'docker-compose.yml'
              - '.dockerignore'
            helm:
              - 'helm/**'
              - '.github/workflows/cd.yml'
            database:
              - 'database/**'
              - 'schema.sql'

  # ═══════════════════════════════════════════════════════════════════════════
  # 🎨 FRONTEND PIPELINE
  # ═══════════════════════════════════════════════════════════════════════════
  frontend-quality:
    name: 🎨 Frontend Quality
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    strategy:
      matrix:
        node-version: [18, 20]
        os: [ubuntu-latest, macos-latest]
        exclude:
          - os: macos-latest
            node-version: 20
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 🚀 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: 'apps/web/pnpm-lock.yaml'

      - name: 📋 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            apps/web/node_modules
            apps/web/.next/cache
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('apps/web/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: 📦 Install Dependencies
        working-directory: apps/web
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type Check
        working-directory: apps/web
        run: pnpm run type-check

      - name: 🧹 Lint Code
        working-directory: apps/web
        run: pnpm run lint

      - name: 🎨 Check Formatting
        working-directory: apps/web
        run: pnpm run format:check

      - name: 🧪 Run Unit Tests
        working-directory: apps/web
        run: pnpm run test:unit
        env:
          CI: true

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          files: apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-${{ matrix.os }}-node${{ matrix.node-version }}

  frontend-build:
    name: 🏗️ Frontend Build
    runs-on: ubuntu-latest
    needs: [detect-changes, frontend-quality]
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'apps/web/pnpm-lock.yaml'

      - name: 📦 Install Dependencies
        working-directory: apps/web
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Application
        working-directory: apps/web
        run: pnpm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            apps/web/.next
            apps/web/public
          retention-days: 1

  # ═══════════════════════════════════════════════════════════════════════════
  # 🐍 BACKEND API PIPELINE
  # ═══════════════════════════════════════════════════════════════════════════
  api-quality:
    name: 🐍 API Quality
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true'
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'apps/api/requirements.txt'

      - name: 📦 Install Dependencies
        working-directory: apps/api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy pytest-cov

      - name: 🧹 Format Check (Black)
        working-directory: apps/api
        run: black --check --diff .

      - name: 📦 Import Sort Check
        working-directory: apps/api
        run: isort --check-only --diff .

      - name: 🔍 Lint (Flake8)
        working-directory: apps/api
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🏷️ Type Check (MyPy)
        working-directory: apps/api
        run: mypy . --ignore-missing-imports

      - name: 🧪 Run Tests
        working-directory: apps/api
        run: pytest --cov=app --cov-report=xml --cov-report=term
        env:
          PYTHONPATH: .

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          files: apps/api/coverage.xml
          flags: api
          name: api-python${{ matrix.python-version }}

  # ═══════════════════════════════════════════════════════════════════════════
  # ⚙️ WORKER PIPELINE
  # ═══════════════════════════════════════════════════════════════════════════
  worker-quality:
    name: ⚙️ Worker Quality
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.worker-changed == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'apps/worker/requirements.txt'

      - name: 📦 Install Dependencies
        working-directory: apps/worker
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy pytest-cov

      - name: 🧹 Format Check
        working-directory: apps/worker
        run: black --check --diff .

      - name: 📦 Import Sort Check
        working-directory: apps/worker
        run: isort --check-only --diff .

      - name: 🔍 Lint
        working-directory: apps/worker
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🧪 Run Tests
        working-directory: apps/worker
        run: pytest --cov=worker --cov-report=xml --cov-report=term
        env:
          PYTHONPATH: .

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          files: apps/worker/coverage.xml
          flags: worker

  # ═══════════════════════════════════════════════════════════════════════════
  # 🗄️ DATABASE VALIDATION
  # ═══════════════════════════════════════════════════════════════════════════
  database-validation:
    name: 🗄️ Database Validation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.database-changed == 'true'
    
    services:
      clickhouse:
        image: clickhouse/clickhouse-server:24.6
        ports:
          - 8123:8123
          - 9000:9000
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ⏱️ Wait for ClickHouse
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8123/ping; do sleep 2; done'

      - name: 🗄️ Validate Schema
        run: |
          curl -X POST 'http://localhost:8123/' \
            -H 'Content-Type: text/plain' \
            --data-binary @database/schema.sql

      - name: 🧪 Test Migrations
        run: |
          echo "SELECT 'Schema validation successful'" | curl -X POST 'http://localhost:8123/' \
            -H 'Content-Type: text/plain' --data-binary @-

  # ═══════════════════════════════════════════════════════════════════════════
  # 🐋 DOCKER BUILD
  # ═══════════════════════════════════════════════════════════════════════════
  docker-build:
    name: 🐋 Docker Build
    runs-on: ubuntu-latest
    needs: [frontend-build, api-quality, worker-quality]
    if: always() && (needs.frontend-build.result == 'success' || needs.api-quality.result == 'success' || needs.worker-quality.result == 'success')
    strategy:
      matrix:
        service: [frontend, api, worker]
        include:
          - service: frontend
            dockerfile: Dockerfile.front
            context: apps/web
          - service: api
            dockerfile: Dockerfile.api
            context: apps/api
          - service: worker
            dockerfile: Dockerfile.worker
            context: apps/worker
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔐 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ═══════════════════════════════════════════════════════════════════════════
  # 🛡️ SECURITY SCAN
  # ═══════════════════════════════════════════════════════════════════════════
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔒 Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: auto
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # ═══════════════════════════════════════════════════════════════════════════
  # ✅ CI SUCCESS
  # ═══════════════════════════════════════════════════════════════════════════
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: 
      - frontend-quality
      - frontend-build
      - api-quality
      - worker-quality
      - database-validation
      - docker-build
      - security-scan
    if: always()
    
    steps:
      - name: ✅ Check All Jobs
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ One or more jobs failed"
            exit 1
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "⏸️ One or more jobs were cancelled"
            exit 1
          else
            echo "✅ All jobs completed successfully"
          fi

      - name: 🎉 Success Notification
        if: success()
        run: |
          echo "🎉 CI Pipeline completed successfully!"
          echo "✅ All quality checks passed"
          echo "🚀 Ready for deployment" 