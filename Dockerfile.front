# Frontend Dockerfile for Next.js 14 with NextAuth
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package.json from apps/web with NextAuth dependencies  
COPY apps/web/package.json ./
RUN npm install --production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY apps/web/package.json ./

# Copy NextAuth source code and config files
COPY src/ ./src/
COPY next.config.ts ./
COPY apps/web/tsconfig.json ./
COPY apps/web/postcss.config.mjs ./
COPY apps/web/components.json ./
COPY apps/web/public/ ./public/

# Install all dependencies (including dev dependencies for build)
RUN npm install

# Create new next.config.ts with ESLint disabled and standalone output
RUN rm -f next.config.ts && \
    echo 'import type { NextConfig } from "next";' > next.config.ts && \
    echo '' >> next.config.ts && \
    echo 'const nextConfig: NextConfig = {' >> next.config.ts && \
    echo '  output: "standalone",' >> next.config.ts && \
    echo '  eslint: {' >> next.config.ts && \
    echo '    ignoreDuringBuilds: true,' >> next.config.ts && \
    echo '  },' >> next.config.ts && \
    echo '  experimental: {' >> next.config.ts && \
    echo '    optimizePackageImports: ["lucide-react", "framer-motion"]' >> next.config.ts && \
    echo '  },' >> next.config.ts && \
    echo '  images: {' >> next.config.ts && \
    echo '    domains: ["lh3.googleusercontent.com"],' >> next.config.ts && \
    echo '  },' >> next.config.ts && \
    echo '};' >> next.config.ts && \
    echo '' >> next.config.ts && \
    echo 'export default nextConfig;' >> next.config.ts

# Build the application with Next.js directly
RUN npx next build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the entire standalone output
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Set proper ownership and permissions
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

WORKDIR /app
CMD ["node", "server.js"]